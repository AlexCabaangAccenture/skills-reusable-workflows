
using CAT.App.D365.Service.Core.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Blob;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Core.Utilities
{
    public class StorageAccountService : IStorageAccountService
    {
        private readonly ILogger<StorageAccountService> _logger;
        private CloudBlobClient _blobClient;
        private readonly IConfiguration _config;
        private readonly string _blobConnectionString;

        public StorageAccountService(ILogger<StorageAccountService> logger, IConfiguration config)
        {
            _config = config;
            _logger = logger;
            //TO DO: move the string <BlobConnectionString> to contant as this will not change
            _blobConnectionString = _config[$"AppSettings:BlobConnectionString"] ?? _config["BlobConnectionString"];
        }

        public async Task<string> GetLiquidTemplateAsync(BlobInformation blobInformation)
        {
            try
            {
                //Do parameter null check
                if (string.IsNullOrEmpty(blobInformation.ContainerName)) throw new NullReferenceException("Blob Container Name is empty");
                if (string.IsNullOrEmpty(blobInformation.TemplateName)) throw new NullReferenceException("Template Filename is empty");

                var client = GetESBBlobClient(_blobConnectionString);
                var blobContainer = await GetBlobContainer(client, blobInformation.ContainerName);
                CloudBlockBlob blockBlob = blobContainer.GetBlockBlobReference(blobInformation.TemplateName);

                return await blockBlob.DownloadTextAsync();
            }
            catch (Exception ex)
            {
                throw new Exception($"There was an error when uploading to Blob. Method Name 'UploadFromFileAsync' {ex}");
            }
        }


        private CloudBlobClient GetESBBlobClient(string _blobConnectionSting)
        {
            try
            {
                if (_blobClient != null)
                {
                    return _blobClient;
                }
                else
                {
                    CloudStorageAccount cloudStorageAccount = CloudStorageAccount.Parse(_blobConnectionSting);
                    _blobClient = cloudStorageAccount.CreateCloudBlobClient();
                    return _blobClient;
                }
            }
            catch (Exception exc)
            {
                throw new Exception($"There was an error initializing blob client- Error {exc}");
            }
        }

        private async Task<CloudBlobContainer> GetBlobContainer(CloudBlobClient client, string containerName)
        {
            try
            {
                //Get blob container 
                CloudBlobContainer cloudBlobContainer = client.GetContainerReference(containerName);

                //Container Existence Validation
                if (await cloudBlobContainer.CreateIfNotExistsAsync())
                {
                    await cloudBlobContainer.SetPermissionsAsync(new BlobContainerPermissions { PublicAccess = BlobContainerPublicAccessType.Container });
                }
                return cloudBlobContainer;
            }
            catch (Exception exc)
            {
                throw new Exception($"There was an error initializing blob container {containerName} - Error {exc}");
            }
        }
    }
}
